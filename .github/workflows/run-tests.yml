name: Run Backend and Frontend Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # backend-tests:
  #   name: Backend Tests
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'

  #     - name: Install Backend Dependencies
  #       run: |
  #         cd backend
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Run Backend Tests
  #       run: |
  #         cd backend
  #         python -m unittest discover -s tests -p "*.py"

  # frontend-tests:
  #   name: Frontend Tests
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install Frontend Dependencies
  #       run: |
  #         cd frontend
  #         npm install

  #     - name: Run Frontend Tests
  #       run: |
  #         cd frontend
  #         npm test
  
  cypress-tests:
    name: Cypress Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .env file
        run: |
          touch .env
          echo GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} >> .env
          cat .env

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Backend Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Backend Unix
        if: runner.os != 'Windows'
        run: |
          cd backend
          nohup python server.py > backend.log 2>&1 &
        shell: bash

      - name: Run Backend Windows
        if: runner.os == 'Windows'
        run: |
          cd backend
          start /B python server.py > backend.log 2>&1
        shell: cmd

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Start Server Unix
        if: runner.os != 'Windows'
        run: |
          cd frontend
          npm run start:dev &
        shell: bash

      - name: Start Server, Run Cypress Tests, and Upload Artifacts
        if: runner.os == 'Windows'
        run: |
          # Navigate to the frontend directory
          cd frontend

          # Start the server in the background
          start /B npm run start:dev

          # Wait for the server to be accessible (wait for the server to start on port 3000)
          echo "Waiting for the server to be available at http://localhost:3000"
          timeout /t 30 /nobreak >nul
          :waitForServer
          curl --silent --head --fail http://localhost:3000 || (
            echo "Server is not ready yet, retrying..."
            timeout /t 5 /nobreak >nul
            goto waitForServer
          )
          echo "Server is available, running Cypress tests..."

          # Run Cypress tests
          npx cypress run

          # Upload Cypress artifacts if the tests fail
          if %ERRORLEVEL% neq 0 (
            echo "Cypress tests failed. Uploading artifacts..."
            mkdir -p artifacts
            copy frontend/cypress/videos/* artifacts/
            copy frontend/cypress/screenshots/* artifacts/
            # Upload the artifacts
            echo "Uploading Cypress artifacts..."
            curl -X POST -F "file=@artifacts/videos/" -F "file=@artifacts/screenshots/" https://uploads.github.com
          )
        shell: cmd